plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
//    id("io.micronaut.library") version "3.7.3"
    id("io.micronaut.application") version "4.4.4"
    id("io.micronaut.aot") version "4.4.4"
    id 'maven-publish'
    id 'signing'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'java-library'
}

group = 'io.github.oss-slu'
version = 'v1.2'

apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    compileOnly("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
//    annotationProcessor("io.micronaut:micronaut-validation")
//    implementation("io.micronaut:micronaut-http-client")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
//    implementation("io.micronaut:micronaut-jackson-databind")
//    implementation("io.micronaut:micronaut-validation")
    implementation 'org.fusesource.jansi:jansi:2.4.0'
    implementation files("libs/crowpi.jar", "libs/components.jar")
    runtimeOnly "org.yaml:snakeyaml:2.0"
    api 'com.pi4j:pi4j-core:2.4.0'
    api 'com.pi4j:pi4j-plugin-raspberrypi:2.4.0'
    api 'com.pi4j:pi4j-plugin-pigpio:2.4.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation("org.mockito:mockito-core:5.+")
    testImplementation(platform("org.junit:junit-bom:5.11.0"))
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")

}

application {
    mainClass = "com.opensourcewithslu.Application"
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

tasks.named('build').configure {
    dependsOn 'javadoc'
    copy {
        from tasks.javadoc.destinationDir
        into "src/docs/javadoc"
    }
}

asciidoctor {
    attributes 'stylesheet': "style.css"
    baseDirFollowsSourceDir()
    resources {
        from(sourceDir) {
            include 'img/**'
        }
        from("${sourceDir}/../") {
            include 'javadoc/**'
        }
    }
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.named('javadocJar').configure {
    dependsOn 'javadoc'
}


artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            credentials {
                username = project.findProperty('SONATYPE_USERNAME') ?: System.getenv('SONATYPE_USERNAME')
                password = project.findProperty('SONATYPE_PASSWORD') ?: System.getenv('SONATYPE_PASSWORD')
            }
            def releasesRepoUrl = uri('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/')
            def snapshotsRepoUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.oss-slu'
            artifactId = 'pi4micronaut-utils'
            version = 'v1.2'
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'pi4micronaut-utils'
                packaging = 'jar'
                description = 'A Java-based library that uses the Micronaut framework and Pi4J to simplify the use of electronic components connected to a Raspberry Pi through GPIO '
                url = "https://github.com/oss-slu/Pi4Micronaut"

                licenses {
                    license {
                        name = 'The Apache Licence, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'ruthvikm'
                        name = 'Ruthvik Mannem'
                    }
                    developer{
                        id = 'SwindleA'
                        name = 'Adrian Swindle'
                    }
                    developer{
                        id = 'joefol'
                        name = 'Joe Folen'
                    }
                    developer{
                        id = 'adelgadoj3'
                        name = 'Alex Delgado'
                    }
                    developer{
                        id = 'jyanev'
                        name = 'John Yanev'
                    }
                    developer{
                        id = 'MurrayG'
                        name = 'Greih Murray'
                    }
                    developer{
                        id = 'TraisonD'
                        name = 'Traison Diedrich'
                    }
                    developer{
                        id = 'AustinH'
                        name = 'Austin Howard'
                    }
                    developer{
                        id = 'SinuoL'
                        name = 'Sinuo Liu'
                    }

                }

                scm {
                    url = 'https://github.com/oss-slu/Pi4Micronaut'
                    connection = 'scm:https://github.com/oss-slu/Pi4Micronaut.git'
                    developerConnection = 'scm:https://github.com/oss-slu/Pi4Micronaut.git'
                }
            }
        }
    }

    signing {
        useInMemoryPgpKeys(System.getenv('GPG_KEY'), System.getenv('GPG_PASSWORD'))
        sign publishing.publications.mavenJava
    }

    test{
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }

    }
}


